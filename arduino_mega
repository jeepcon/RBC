// Output Pins
const int LightBar1 = 16; //Red
const int LightBar2 = 17; //Amber
const int LightBar3 = 18; //Red
const int LightBar4 = 19; //Red
const int LightBar5 = 20; //Amber
const int LightBar6 = 21; //Red

const int BrakeRight = 22;
const int BrakeLeft = 23;
const int RunningRight = 24;
const int RunningLeft = 25;
const int TurnRight = 26;
const int TurnLeft = 27;
const int FlasherRight = 28;
const int FlasherLeft = 29;
const int BackupRight = 30;
const int BackupLeft = 31;
const int MarkerRight = 32;
const int MarkerLeft = 33;

const int FuelPump = 37;

// Input Pins
const int FuelLevel_IN = A0;
const int AirTankPSI_IN = A1;

const int Brake_IN = 53;


// Generally, you should use "unsigned long" for variables that hold time
// The value will quickly become too large for an int to store
unsigned long previousMillis = 0;        // will store last time LED was updated

// constants won't change:
const long interval = 1000;           // interval at which to blink (milliseconds)


int BrakeState = LOW;

void setup() {

  Serial.begin(9600);

  pinMode(LightBar1, OUTPUT);
  pinMode(LightBar2, OUTPUT);
  pinMode(LightBar3, OUTPUT);
  pinMode(LightBar4, OUTPUT);
  pinMode(LightBar5, OUTPUT);
  pinMode(LightBar6, OUTPUT);

  pinMode(BrakeRight, OUTPUT);
  pinMode(BrakeLeft, OUTPUT);
  pinMode(RunningRight, OUTPUT);
  pinMode(RunningLeft, OUTPUT);
  pinMode(TurnRight, OUTPUT);
  pinMode(TurnLeft, OUTPUT);
  pinMode(FlasherRight, OUTPUT);
  pinMode(FlasherLeft, OUTPUT);
  pinMode(BackupRight, OUTPUT);
  pinMode(BackupLeft, OUTPUT);
  pinMode(MarkerRight, OUTPUT);
  pinMode(MarkerLeft, OUTPUT);

  pinMode(FuelPump, OUTPUT);
 
  pinMode(AirTankPSI_IN, INPUT);
  pinMode(FuelLevel_IN, INPUT);

  pinMode(Brake_IN, INPUT_PULLUP);
}

void loop() {

  if (Serial.available()) {
    SerialData = Serial.readString();
  }

  Brake();
  EMLights();
  FuelPump();
  BackupLights();
  RunningLights();
  RightTurn();
  LeftTurn();

}

void Brake() {
  
  if (digitalRead(Brake_IN) == HIGH) {
    BrakeState = LOW;
    Serial.println("BrakeStateLOW");
  }
  else
  {
    BrakeState = HIGH;
    Serial.println("BrakeStateHIGH");
  }

  digitalWrite(BrakeRight, BrakeState);
  digitalWrite(BrakeLeft, BrakeState);
  digitalWrite(LightBar1, BrakeState);
  digitalWrite(LightBar3, BrakeState);
  digitalWrite(LightBar4, BrakeState);
  digitalWrite(LightBar6, BrakeState);

}

void EMLights() {

  unsigned long currentMillis = millis();

  if (SerialData == EMLightsON) {
    if (currentMillis - previousMillis >= interval) {
      // save the last time you blinked the LED
      previousMillis = currentMillis;

      // if the LED is off turn it on and vice-versa:
      if (ledState1 == LOW) {
        ledState1 = HIGH;
        ledState2 = LOW;
      } 
      else {
        ledState1 = LOW;
        ledState2 = HIGH;
      }

    // set the LED with the ledState of the variable:
    digitalWrite(LightBar1, ledState1);
    digitalWrite(LightBar2, ledState2);
    digitalWrite(LightBar3, ledState1);
    digitalWrite(LightBar4, ledState1);
    digitalWrite(LightBar5, ledState2);
    digitalWrite(LightBar6, ledState1);

    digitalWrite(FlasherRight, ledState1);
    digitalWrite(FlasherLeft, ledState2);
  }

  if (SerialData == EMLightsOFF) {
    digitalWrite(LightBar1, LOW);
    digitalWrite(LightBar2, LOW);
    digitalWrite(LightBar3, LOW);
    digitalWrite(LightBar4, LOW);
    digitalWrite(LightBar5, LOW);
    digitalWrite(LightBar6, LOW);

    digitalWrite(FlasherRight, LOW);
    digitalWrite(FlasherLeft, LOW);
  }
}

void FuelPump() {

  if (SerialData == EMLightsON) {
    digitalWrite(FuelPump, HIGH);
  }
  if (SerialData == EMLightsOFF) {
    digitalWrite(FuelPump, LOW);
  }

}

void BackupLights() {

  if (SerialData == BackupLightsON) {
    digitalWrite(BackupRight, HIGH);
    digitalWrite(BackupLeft, HIGH);
  }
  if (SerialData == BackupLightsOFF) {
    digitalWrite(BackupRight, LOW);
    digitalWrite(BackupLeft, LOW);
  }

}

void RunningLights() {

  if (SerialData == RunningLightsON) {
    digitalWrite(RunningRight, HIGH);
    digitalWrite(RunningLeft, HIGH);
  }
  if (SerialData == RunningLightsOFF) {
    digitalWrite(RunningRight, LOW);
    digitalWrite(RunningLeft, LOW);
  }

}

void RightTurn() {

  if (SerialData == RightTurnON) {
    digitalWrite(TurnRight, HIGH);
  }
  if (SerialData == RightTurnOFF) {
    digitalWrite(TurnRight, LOW);
  }

}

void LeftTurn() {

  if (SerialData == LeftTurnON) {
    digitalWrite(TurnLeft, HIGH);
  }
  if (SerialData == LeftTurnOFF) {
    digitalWrite(TurnLeft, LOW);
  }

}
